[tox]
envlist = ruff, mypy, mdlint, shellcheck, shfmt
; ruff가 3개 (black, isort, lint) 통합
# 프로젝트를 설치 가능한 배포판(sdist/bdist)으로 빌드하는 것을 건너뜁니다.
skipsdist = true
# 시스템에 없는 파이썬 인터프리터를 건너뜁니다.
# 팀원들의 환경에 특정 파이썬 버전이 설치되어 있지 않을 경우 유용합니다.
skip_missing_interpreters = true


[testenv]
; skip_install = true
# 개발 모드로 프로젝트를 설치. 즉, 소스 코드 변경 시 재설치 없이 바로 반영
usedevelop = true  # pip install -e . // editable
# 프로젝트의 'dev' 의존성 그룹은 pyproject.toml의 [dependency-groups.dev] 섹션에 정의되어 있습니다.
deps =
    [dev]
setenv =
    targetdir = .
    FILTER_EXT = '\.(py|ipynb)$'
    EXCLUDE_DIRS = 'build|dist|.venv|.tox|__pycache__'
    EXCLUDE_DIRS_lint = 'build,dist,.tox,.venv,__pycache__'
allowlist_externals =
    pylint
    mypy
    markdownlint
    pylint-exit
    pytest
    shellcheck
    shfmt
    bash

[testenv:ruff]
description = Run ruff linter and formatter
deps =
    ruff
commands =
    # 포매터 실행
    ruff format {env:targetdir}
    # 린터 실행 및 자동 수정
    ruff check {env:targetdir} --fix

[testenv:black]
description = Run black code formatter (modifies files)
deps = 
    black
    black[jupyter]
commands =
    black {env:targetdir} --include {env:FILTER_EXT} --exclude {env:EXCLUDE_DIRS}

[testenv:isort]
description = Run isort import sorter (modifies files)
deps = 
    isort
    nbqa
commands =
    isort {env:targetdir} --filter-files
    bash -c "nbqa isort $(find {env:targetdir} -name '*.ipynb')"

[testenv:mypy]
description = Run mypy type checker
deps = mypy
commands =
    mypy {env:targetdir} --exclude {env:EXCLUDE_DIRS}

[testenv:pylint]
description = Run pylint linter
deps = pylint
commands =
    pylint {env:targetdir} --ignore={env:EXCLUDE_DIRS_lint}

[testenv:lint]
description = Run pylint only (shortcut)
deps = {[testenv:pylint]deps}
commands = {[testenv:pylint]commands}

[testenv:mdlint]
description = Run markdownlint on markdown files
skip_install = true
allowlist_externals = markdownlint
commands =
    markdownlint --fix --config .markdownlint.json '**/*.md'


[testenv:shellcheck]
description = Run ShellCheck on all .sh files and .bash files
skip_install = true
deps =
allowlist_externals =
    bash
    find
    shellcheck
    xargs
setenv = #섹션 내부에 변수 정의
    target_include_dir_for_shell = .
    target_exclude_dirs_for_shell = ./.venv ./.tox ./build
commands =
    # 동적으로 find 명령어를 구성하여 여러 제외 디렉토리를 처리합니다.
    bash -c 'EXCLUDE_PATHS="{env:target_exclude_dirs_for_shell}"; \
            FIND_COMMAND="find {env:target_include_dir_for_shell}"; \
            for p in $EXCLUDE_PATHS; do FIND_COMMAND="$FIND_COMMAND -path \"$p\" -prune -o"; done; \
            FIND_COMMAND="$FIND_COMMAND -type f \\( -name \"*.sh\" -o -name \"*.bash\" \\) -print0"; \
            eval "$FIND_COMMAND" | xargs -0 shellcheck -x -e SC1090,SC1091,SC2164,SC2086,SC2181'



[testenv:shfmt]
description = Check shell script formatting with shfmt
skip_install = true
deps =
allowlist_externals =
    bash
    find
    shfmt
    xargs
setenv = #섹션 내부에 변수 정의
    target_include_dir_for_shell = .
    target_exclude_dirs_for_shell = ./.venv ./.tox ./build
commands =
    # 동적으로 find 명령어를 구성하여 여러 제외 디렉토리를 처리합니다.
    bash -c 'EXCLUDE_PATHS="{env:target_exclude_dirs_for_shell}"; \
            FIND_COMMAND="find {env:target_include_dir_for_shell}"; \
            for p in $EXCLUDE_PATHS; do FIND_COMMAND="$FIND_COMMAND -path \"$p\" -prune -o"; done; \
            FIND_COMMAND="$FIND_COMMAND -type f \\( -name \"*.sh\" -o -name \"*.bash\" \\) -print0"; \
            eval "$FIND_COMMAND" | xargs -0 shfmt -w -i 4'



# --- 파이썬 버전별 테스트 환경 ---
[testenv:py310]
basepython = python3.10
commands = pytest


[testenv:py311]
basepython = python3.11
commands = pytest


[testenv:py312]
basepython = python3.12
commands = pytest


[testenv:py313]
basepython = python3.13
commands = pytest
